#!/usr/bin/python
# -*- coding: utf-8 -*-

# Copyright (c) 2012 Martin Ueding <dev@martin-ueding.de>

###############################################################################
#                                   License                                   #
###############################################################################
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 2 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program. If not, see <http://www.gnu.org/licenses/>.

"""
Script to parse snapshots of ``top`` and ``sensors`` from a server.
"""

import csv
import datetime
import itertools
import optparse
import os
import sys
import time

import libcomputer
import parsers
import reports

__docformat__ = "restructuredtext en"

def main():
    _check_python_version()

    (options, args) = _parse_args()

    # If an output file is given, use that instead of standard output.
    if options.outfile == "-":
        outfile = sys.stdout
    else:
        outfile = open(options.outfile, "w")

    computer = _generate_computer_instance(options.importfile, args)

    # Iterate through all folders that are given on the command line.
    for infolder in args:
        os.path.walk(infolder, parsers.parsefolder, (options, computer))

    _handle_reports(outfile, computer, options)

    # If an outfile was used, close it.
    if options.outfile != "-":
        outfile.close()


def _generate_computer_instance(importfile, args):
    """
    Generate a computer instance. Either from given import file or from scratch.

    :param importfile: Importfile to use.
    :param args: CLI arguments to check whether files are given if no import file.
    :return: Empty or imported computer instance.
    """
    # Create a new computer if no import is given.
    if importfile is None:
        computer = libcomputer.Computer()

        # If nothing is imported, there have to be some files to parse.
        if len(args) < 1:
            print "I need some input."
            sys.exit(1)

    # Import the dump.
    else:
        with open(importfile) as f:
            computer = eval(f.read())

    return computer


def _handle_reports(outfile, computer, options):
    """
    Write all the wanted reports.

    :param outfile: File to be written to.
    :param computer: Computer instance for input data.
    :param options: Program options.
    """
    # Maximum Report.
    if options.max:
        reports.maximum(computer)

    # Computer Overview Report.
    if options.computer:
        reports.computer_overview(outfile, computer)

    # Single Process Report.
    if options.process is not None:
        reports.process_report(outfile, computer.processes, options.process, options.format)

    # Complete Dump.
    if options.dump:
        reports.dump(outfile, computer)


def _parse_args():
    parser = optparse.OptionParser(usage="chaos_log folders...", description="Parses chaos log files and offeres summaries.")
    parser.add_option("--computer", dest="computer", action="store_true", default=False, help="Report for whole computer.")
    parser.add_option("--dump", dest="dump", action="store_true", default=False, help="Dump whole data to outfile.")
    parser.add_option("--files", dest="files", action="store_true", default=False, help="Show each processed file.")
    parser.add_option("--format", dest="format", default="csv", help="Choose CSV or Plain [default: %default]")
    parser.add_option("--import", dest="importfile", default=None, help="Import from given dump.")
    parser.add_option("--max", dest="max", action="store_true", default=False, help="Show min-max status.")
    parser.add_option("-o", dest="outfile", default="-", help="If given, write report into that file.")
    parser.add_option("--process", dest="process", default=None, help="Report for only this process")
    parser.add_option("-v", dest="verbose", action="store_true", default=False, help="Show steps.")

    return parser.parse_args()


def _check_python_version():
    if sys.version_info >= (3, 0):
        print "You are using python 3, which is not intended for this script."
        print "If something fails, you might want to try:"
        print "python2 chaos_log [options for chaos_log]"


if __name__ == "__main__":
    main()
